/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package flightbookingsystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author abbas
 */
public class databaseConnection {

    private static Connection cn;
    private static PreparedStatement ps;
    private static ResultSet rs;

    public databaseConnection() {
    }

    private static Connection getCn() {

        if (cn != null) {
            return cn;
        }
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/flight_booking_system", "root", "Mightymunch123");
            return con;
        } catch (SQLException ex) {
            System.out.println("SQL Exception Error :- " + ex.getMessage());
            return null;
        } catch (ClassNotFoundException ex) {
            System.out.println("Class not found exception Error :- " + ex.getMessage());
            return null;
        }
    }

    private static boolean addQuery(String query) throws SQLException {
        ps = databaseConnection.getCn().prepareStatement(query);
        if (ps.execute() == false) {
            System.out.println("Data Stored In Database");
            return true;
        } else {
            System.out.println("Error While Adding Data in Data base");
            return false;
        }
    }

    public static ResultSet retriveQuery(String query) throws SQLException {
        ps = databaseConnection.getCn().prepareStatement(query);
        rs = ps.executeQuery();
        return rs;
    }

    public static boolean update_Delete_Query(String query) {
        System.out.println("Query  : " + query);
        try {
            ps = databaseConnection.getCn().prepareStatement(query);
            if (!ps.execute() == false) {
                System.out.println("Error While Storing Data In Database");
                return false;
            } else {
                System.out.println("Data Updated");
                return true;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error While Updating Data");
            return false;
        }
    }

    public static boolean isAdminExist(String email, String password, String type) {
        try {
            String query = "select firstName from user where email='" + email + "' and password ='" + password + "' and userType='" + type + "'";
            if (retriveQuery(query).next()) {
                String firstName = rs.getString("firstName");
                System.out.println("Welcome : " + firstName);
                return true;
            } else {
                return false;
            }
        } catch (SQLException ex) {
            System.out.println("Exception : " + ex.getMessage());
            return false;
        }

    }

    public static boolean addNewPilot(String fname, String lname, String dob, String phone) {
        try {
            String query = "INSERT INTO `flight_booking_system`.`pilot` (`FirstName`, `LastName`, `DOB`, `phoneNumber`) VALUES ('" + fname + "', '" + lname + "', '" + dob + "', '" + phone + "')";
            System.out.println("Qsery : " + query);
            return addQuery(query);
        } catch (SQLException ex) {
            System.out.println("Exception : " + ex.getMessage());
            return false;
        }
    }

    public static boolean addNewAeroplane(String pilotId, String numerAvailable, String modelNumber) {
        try {
            String query = "INSERT INTO `flight_booking_system`.`aeroPlane` (`pilotId`, `NumberOSeatsAvailable`, `NumberOfSeatsBooked`, `Model`) VALUES ('" + pilotId + "', '" + numerAvailable + "', '0', '" + modelNumber + "');";
            System.out.println("Qsery : " + query);
            return addQuery(query);
        } catch (SQLException ex) {
            System.out.println("Exception : " + ex.getMessage());
            return false;
        }
    }

    public static boolean addNewAirport(String name, String location, String contactNumber) {
        try {
            String query = "INSERT INTO `flight_booking_system`.`airport` (`Name`, `location`, `contactNumber`) VALUES ('" + name + "', '" + location + "', '" + contactNumber + "');";
            System.out.println("Qsery : " + query);
            return addQuery(query);
        } catch (SQLException ex) {
            System.out.println("Exception : " + ex.getMessage());
            return false;
        }
    }

    public static boolean addNewCities(String cityName, String airportId) {
        try {
            String query = "INSERT INTO `flight_booking_system`.`cities` (`cityName`, `airportId`) VALUES ('" + cityName + "', '" + airportId + "');";
            System.out.println("Qsery : " + query);
            return addQuery(query);
        } catch (SQLException ex) {
            System.out.println("Exception : " + ex.getMessage());
            return false;
        }
    }
//INSERT INTO `flight_booking_system`.`trips` (`tripName`, `fromCity`, `toCity`, `departureDate`, `departureTIme`, `planeId`, `notes`, `ticketPrice`) VALUES ('Test1', '1', '3', '2019-01-01', '12:12', '1', 'asd', '123');

    public static boolean addNewTrip(String tripName, String fromCity, String toCity, String departureDate, String departureTime, String PlaneID, String notes, String ticketPrice) {
        try {
            String query = "INSERT INTO `flight_booking_system`.`trips` (`tripName`, `fromCity`, `toCity`, `departureDate`, `departureTIme`, `planeId`, `notes`, `ticketPrice`) VALUES ('" + tripName + "', '" + fromCity + "', '" + toCity + "', '" + departureDate + "', '" + departureTime + "', '" + PlaneID + "', '" + notes + "', '" + ticketPrice + "');";
            System.out.println("Qsery : " + query);
            return addQuery(query);
        } catch (SQLException ex) {
            System.out.println("Exception : " + ex.getMessage());
            return false;
        }
    }

    public static boolean addNewUser(String firstName, String lastName, String email, String password, String dob, String phone) {
        try {
            String query = "INSERT INTO `flight_booking_system`.`user` (`firstName`, `lastName`, `email`, `password`, `dob`, `phone`, `userType`) VALUES ('"+firstName+"', '"+lastName+"', '"+email+"', '"+password+"', '"+dob+"', '"+phone+"', 'User');";
            System.out.println("Qsery : " + query);
            return addQuery(query);
        } catch (SQLException ex) {
            System.out.println("Exception : " + ex.getMessage());
            return false;
        }
    }
    
     public static boolean addNewBooking(String userId,String tripId,String tickets) {
        try {
            String query = "INSERT INTO `flight_booking_system`.`bookings` (`userId`, `tripId`, `tickets`, `bookingDate`) VALUES ('"+userId+"', '"+tripId+"', '"+tickets+"', now());";
            System.out.println("Qsery : " + query);
            return addQuery(query);
        } catch (SQLException ex) {
            System.out.println("Exception : " + ex.getMessage());
            return false;
        }
    }
}
